
// rem
// http://davidensinger.com/2013/03/using-rems-with-sass/
@mixin rem($property, $values) {
  // Create a couple of empty lists as output buffers.
  $base-font-size: $base-font-size; // css/main.scss
 // $font-size: $rem-base;  - libs/foundation/foundation/_settings.scss
  $px-values: ();
  $rem-values: ();

  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if $value == 0 or $value == 0px {
      // 0 -- use it without a unit
      $px-values: join($px-values, 0);
      $rem-values: join($rem-values, 0);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
      // px value given - calculate rem value from base-font-size
      $new-rem-value: $value / $base-font-size;
      $px-values: join($px-values, round($value));
     $rem-values: join($rem-values, #{$new-rem-value}rem);
    } @else {
      // unitless value - use those directly as rem and calculate the px-fallback
      $px-values: join($px-values, round($value * $base-font-size));
      $rem-values: join($rem-values, #{$value}rem);
    }
  }

  // output the converted rules
  #{$property}: $px-values;
  #{$property}: $rem-values;
}

// @include rem(font-size, 14px)
// @include rem(margin, 0 auto 1)
// @include rem(padding-bottom, 3%)


@mixin selection {
  ::-moz-selection {
    @content;
  }
  ::selection {
    @content;
  }
}

//handy-sass-mixins
//Responsive Breakpoints
@mixin breakpoint($point) {
  @if $point == large {
    @media (min-width: 64.375em) { @content; }
  }
  @else if $point == medium {
    @media (min-width: 50em) { @content; }
  }
  @else if $point == small {
    @media (min-width: 37.5em)  { @content; }
  }
}

//ex
//.page-wrap {
//  width: 75%;
//  @include breakpoint(large) { width: 60%; }
//  @include breakpoint(medium) { width: 80%; }
//  @include breakpoint(small) { width: 95%; }
//}


//Retina Images
@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}

//ex
//div.logo {
//background: url("logo.png") no-repeat;
//@include image-2x("logo2x.png", 100px, 25px);
//}


//Clearfix
@mixin clearfix() {
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
}

//ex
//.article {
//     @include clearfix();
//}

//Box Sizing
@mixin box-sizing($box-model){
  -webkit-box-sizing: $box-model;
     -moz-box-sizing: $box-model;
          box-sizing: $box-model;
}

//ex
//*,
//*:after,
//*:before{
//  @include box-sizing(border-box);
//}

//border-raidus
@mixin border-radius($radius){
    -webkit-border-radius: $radius;
    border-radius: $radius;
    background-clip: padding-box;

}

// Single side border-radius
@mixin border-top-radius($radius) {
  -webkit-border-top-right-radius: $radius;
  border-top-right-radius: $radius;
   -webkit-border-top-left-radius: $radius;
   border-top-left-radius: $radius;
   background-clip: padding-box;
}
@mixin border-right-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-right-radius: $radius;
     -webkit-border-top-right-radius: $radius;
     border-top-right-radius: $radius;
     background-clip: padding-box;
}
@mixin border-bottom-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-right-radius: $radius;
   -webkit-border-bottom-left-radius: $radius;
   border-bottom-left-radius: $radius;
   background-clip: padding-box;
}
@mixin border-left-radius($radius) {
  -webkit-border-bottom-left-radius: $radius;
  border-bottom-left-radius: $radius;
     -webkit-border-top-left-radius: $radius;
     border-top-left-radius: $radius;
     background-clip: padding-box;
}

//ex
//.button {  @include border-radius(5px); }


//Opacity
@mixin opacity($opacity){
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); // ie8
}

//ceter-block
@mixin center-block{
  display: block;
  margin-left: auto;
  margin-right: auto;
}

//ex .footer-wrarp{ width: 450px; @include center-block}

//text overflow
//@mixin text-truncate{
//overflow: hidden;
//text-overflow: ellipsis;
//white-space: nowrap;}
//

